// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230610145708_refactor portfolio table")]
    partial class refactorportfoliotable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("db_stock")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Auth.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.MarketOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TradeCondition")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("MarketOrders", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Portfolios", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchasedPrice")
                        .HasColumnType("money");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StockId")
                        .IsUnique()
                        .HasFilter("[StockId] IS NOT NULL");

                    b.ToTable("Securities", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("HighMonth")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("LowMonth")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TimeSeriesId")
                        .HasColumnType("int");

                    b.Property<double?>("TrendingScore")
                        .HasColumnType("float");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("TimeSeriesId")
                        .IsUnique()
                        .HasFilter("[TimeSeriesId] IS NOT NULL");

                    b.ToTable("Stocks", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.StockSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Close")
                        .HasColumnType("money");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("High")
                        .HasColumnType("money");

                    b.Property<decimal>("Low")
                        .HasColumnType("money");

                    b.Property<decimal>("Open")
                        .HasColumnType("money");

                    b.Property<int?>("TimeSeriesId")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TimeSeriesId");

                    b.ToTable("StockSnapshots", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.StopOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTriggered")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("StopOrders", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.TimeSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeSeries", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.TradeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("TradeDetails", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.TradeFootprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ProcessedOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProcessedOrderIsBuy")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessedOrderUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RestingOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RestingOrderUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TradeDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TradeDetailsId");

                    b.ToTable("TradeFootprints", "db_stock");
                });

            modelBuilder.Entity("Domain.Entities.ValueSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("ValueSnapshots", "db_stock");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "db_stock");
                });

            modelBuilder.Entity("Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MakerFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TakerFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Fees", "db_stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "db_stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "db_stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "db_stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "db_stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "db_stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "db_stock");
                });

            modelBuilder.Entity("Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.MarketOrder", b =>
                {
                    b.HasOne("Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Stock", "Stock")
                        .WithMany("MarketOrders")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("MarketOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Amount", "Cost", b1 =>
                        {
                            b1.Property<Guid>("MarketOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("MarketOrderId");

                            b1.ToTable("MarketOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("MarketOrderId");
                        });

                    b.OwnsOne("Amount", "FeeAmount", b1 =>
                        {
                            b1.Property<Guid>("MarketOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("MarketOrderId");

                            b1.ToTable("MarketOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("MarketOrderId");
                        });

                    b.OwnsOne("Quantity", "OpenQuantity", b1 =>
                        {
                            b1.Property<Guid>("MarketOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("MarketOrderId");

                            b1.ToTable("MarketOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("MarketOrderId");
                        });

                    b.OwnsOne("Amount", "OrderAmount", b1 =>
                        {
                            b1.Property<Guid>("MarketOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("MarketOrderId");

                            b1.ToTable("MarketOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("MarketOrderId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("MarketOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("MarketOrderId");

                            b1.ToTable("MarketOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("MarketOrderId");
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("FeeAmount")
                        .IsRequired();

                    b.Navigation("OpenQuantity");

                    b.Navigation("OrderAmount");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Portfolio", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithOne("Portfolio")
                        .HasForeignKey("Domain.Entities.Portfolio", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Security", b =>
                {
                    b.HasOne("Domain.Entities.MarketOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Portfolio", "Portfolio")
                        .WithMany("Securities")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Stock", "Stock")
                        .WithOne("Security")
                        .HasForeignKey("Domain.Entities.Security", "StockId");

                    b.OwnsOne("Quantity", "Quantity", b1 =>
                        {
                            b1.Property<int>("SecurityId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("SecurityId");

                            b1.ToTable("Securities", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("SecurityId");
                        });

                    b.Navigation("Order");

                    b.Navigation("Portfolio");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Domain.Entities.Stock", b =>
                {
                    b.HasOne("Domain.Entities.TimeSeries", "TimeSeries")
                        .WithOne("Stock")
                        .HasForeignKey("Domain.Entities.Stock", "TimeSeriesId");

                    b.OwnsOne("Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("StockId");

                            b1.ToTable("Stocks", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Change", "Change", b1 =>
                        {
                            b1.Property<Guid>("StockId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("StockId");

                            b1.ToTable("Stocks", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("StockId");
                        });

                    b.Navigation("Change");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("TimeSeries");
                });

            modelBuilder.Entity("Domain.Entities.StockSnapshot", b =>
                {
                    b.HasOne("Domain.Entities.TimeSeries", "TimeSeries")
                        .WithMany("StockValues")
                        .HasForeignKey("TimeSeriesId");

                    b.Navigation("TimeSeries");
                });

            modelBuilder.Entity("Domain.Entities.StopOrder", b =>
                {
                    b.HasOne("Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Stock", "Stock")
                        .WithMany("StopOrders")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("StopOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Amount", "Cost", b1 =>
                        {
                            b1.Property<Guid>("StopOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("StopOrderId");

                            b1.ToTable("StopOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("StopOrderId");
                        });

                    b.OwnsOne("Amount", "FeeAmount", b1 =>
                        {
                            b1.Property<Guid>("StopOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("StopOrderId");

                            b1.ToTable("StopOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("StopOrderId");
                        });

                    b.OwnsOne("Quantity", "OpenQuantity", b1 =>
                        {
                            b1.Property<Guid>("StopOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("StopOrderId");

                            b1.ToTable("StopOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("StopOrderId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Price", "StopPrice", b1 =>
                        {
                            b1.Property<Guid>("StopOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("StopOrderId");

                            b1.ToTable("StopOrders", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("StopOrderId");
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("FeeAmount")
                        .IsRequired();

                    b.Navigation("OpenQuantity");

                    b.Navigation("Stock");

                    b.Navigation("StopPrice")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TradeDetails", b =>
                {
                    b.OwnsOne("Amount", "AskFee", b1 =>
                        {
                            b1.Property<int>("TradeDetailsId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("TradeDetailsId");

                            b1.ToTable("TradeDetails", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("TradeDetailsId");
                        });

                    b.OwnsOne("Amount", "BidCost", b1 =>
                        {
                            b1.Property<int>("TradeDetailsId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("TradeDetailsId");

                            b1.ToTable("TradeDetails", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("TradeDetailsId");
                        });

                    b.OwnsOne("Amount", "BidFee", b1 =>
                        {
                            b1.Property<int>("TradeDetailsId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("TradeDetailsId");

                            b1.ToTable("TradeDetails", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("TradeDetailsId");
                        });

                    b.OwnsOne("Quantity", "RemainingQuantity", b1 =>
                        {
                            b1.Property<int>("TradeDetailsId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal");

                            b1.HasKey("TradeDetailsId");

                            b1.ToTable("TradeDetails", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("TradeDetailsId");
                        });

                    b.Navigation("AskFee");

                    b.Navigation("BidCost");

                    b.Navigation("BidFee");

                    b.Navigation("RemainingQuantity");
                });

            modelBuilder.Entity("Domain.Entities.TradeFootprint", b =>
                {
                    b.HasOne("Domain.Entities.TradeDetails", "TradeDetails")
                        .WithMany()
                        .HasForeignKey("TradeDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Price", "MatchPrice", b1 =>
                        {
                            b1.Property<int>("TradeFootprintId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money");

                            b1.HasKey("TradeFootprintId");

                            b1.ToTable("TradeFootprints", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("TradeFootprintId");
                        });

                    b.OwnsOne("Quantity", "Quantity", b1 =>
                        {
                            b1.Property<int>("TradeFootprintId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("TradeFootprintId");

                            b1.ToTable("TradeFootprints", "db_stock");

                            b1.WithOwner()
                                .HasForeignKey("TradeFootprintId");
                        });

                    b.Navigation("MatchPrice")
                        .IsRequired();

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("TradeDetails");
                });

            modelBuilder.Entity("Domain.Entities.ValueSnapshot", b =>
                {
                    b.HasOne("Domain.Entities.Portfolio", "Portfolio")
                        .WithMany("ValueSnapshots")
                        .HasForeignKey("PortfolioId");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Portfolio", b =>
                {
                    b.Navigation("Securities");

                    b.Navigation("ValueSnapshots");
                });

            modelBuilder.Entity("Domain.Entities.Stock", b =>
                {
                    b.Navigation("MarketOrders");

                    b.Navigation("Security");

                    b.Navigation("StopOrders");
                });

            modelBuilder.Entity("Domain.Entities.TimeSeries", b =>
                {
                    b.Navigation("Stock");

                    b.Navigation("StockValues");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("MarketOrders");

                    b.Navigation("Portfolio");

                    b.Navigation("StopOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
